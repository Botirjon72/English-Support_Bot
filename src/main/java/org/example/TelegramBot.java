package org.example;

import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;


import com.fasterxml.jackson.databind.JsonNode;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.concurrent.*;
import java.util.regex.Pattern;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.asynchttpclient.AsyncHttpClient;
import org.asynchttpclient.DefaultAsyncHttpClient;
import org.asynchttpclient.ListenableFuture;
import org.asynchttpclient.Response;
import org.json.JSONArray;
import org.json.JSONObject;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendAudio;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;


public class TelegramBot extends TelegramLongPollingBot {
    private static final String BOT_TOKEN = "7522527691:AAF4zKCEsmcxeqnT_nXqgzhtcREINjJuFj8"; // üîπ Telegram bot tokeningiz
    private static final String DEEPGRAM_API_KEY = "22ab72b0bffc48bd565bbcf9451ff55fcb2a035c"; // üîπ Deepgram API kalitingiz
    private static final String RAPIDAPI_URL = "https://chat-gpt26.p.rapidapi.com/";
    private static final String RAPIDAPI_KEY = "e362de5a5bmsha229a92cefdfe68p168425jsnb5dac5a32abe"; // ‚õî API kalitingizni xavfsiz saqlang
    private static final String RAPIDAPI_HOST = "chat-gpt26.p.rapidapi.com";
    private boolean autoMode = false;
    private boolean textSpeech = false;
    private boolean isAiMode = false;
    private final Map<Long, List<TestQuestion>> userTests = new HashMap<>();
    private final Map<Long, List<Questions>> userQuestions = new HashMap<>();
    private final Map<Long, Integer> userScores = new HashMap<>();
    private final Map<Long, Integer> userCurrentQuestion = new HashMap<>();
    private final Map<Long, Boolean> userWaitingForTranslation = new HashMap<>();
    private final Map<Long, String> userSelectedLang = new HashMap<>();
    private static final Pattern MD_V2_PATTERN = Pattern.compile("([_\\*\\[\\]\\(\\)~`>#+\\-=|{}.!])");

    DBService dbService = new DBService();// üîπ Auto Transcription Mode

    String UserName, firstName, lastName, userName;
    LocalDateTime startTime;

    int createdAt;


    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new TelegramBot());
            System.out.println("Bot started");
        } catch (TelegramApiException e) {
            System.err.println("Bot failed");
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            processCallbackQuery(update.getCallbackQuery());
            return;
        }


        if (update.hasMessage()) {
            Message message = update.getMessage();
            long chatId = message.getChatId();
            String text = message.hasText() ? message.getText() : "";

            userName = message.getFrom().getUserName();
            firstName = message.getFrom().getFirstName();
            lastName = message.getFrom().getLastName();
            int createdAt = message.getDate();

            startTime = Instant.ofEpochSecond(createdAt)
                    .atZone(ZoneId.systemDefault()).toLocalDateTime();

            User existingUser = dbService.getUserById(chatId);
            dbService.updateUserLastActive(chatId);


            if (existingUser == null) {
                User user = new User(chatId, userName, firstName, lastName, startTime, 0, 0, 0, 0, false);
                dbService.saveUser(user);
            } else {
                existingUser.setUsername(userName);
                existingUser.setFirstName(firstName);
                existingUser.setLastName(lastName);
                existingUser.setCreatedAt(startTime);

                dbService.updateUser(existingUser);
            }

            // ‚úÖ 1Ô∏è‚É£ Agar AI rejimi yoqilgan bo‚Äòlsa va ovozli xabar bo‚Äòlsa, OpenAI'ga yuboramiz
            if ((message.hasVoice() || message.hasAudio()) && isAiMode) {
                String fileId = message.hasVoice() ? message.getVoice().getFileId() : message.getAudio().getFileId();
                System.out.println("üîπ AI Mode ON: Ovozli xabar qabul qilindi! FileID: " + fileId);
                openAiText(chatId, fileId);
                return;
            }

            // ‚úÖ 2Ô∏è‚É£ Agar Auto Mode yoqilgan bo‚Äòlsa, ovozli xabarni avtomatik qayta ishlash
            if ((message.hasVoice() || message.hasAudio()) && autoMode) {
                String fileId = message.hasVoice() ? message.getVoice().getFileId() : message.getAudio().getFileId();
                System.out.println("üîπ Auto Mode ON: Ovozli xabar qabul qilindi! FileID: " + fileId);
                processAudio(chatId, fileId);
                return;
            }

            // ‚úÖ 3Ô∏è‚É£ Agar test rejimi bo‚Äòlsa, javoblarni qayta ishlaymiz
            if (userTests.containsKey(chatId) && userCurrentQuestion.containsKey(chatId)) {
                processUserAnswer(chatId, text);
                return;
            }

            // ‚úÖ 4Ô∏è‚É£ Agar matn ovozga o‚Äògirilishi kerak bo‚Äòlsa
            if (message.hasText() && textSpeech) {
                System.out.println("üîπ Matn ovozga aylantirilmoqda: " + text);
                String audioUrl = convertTextToSpeech(text);

                if (audioUrl != null) {
                    sendAudioMessage(chatId, audioUrl);
                } else {
                    sendTextMessage(chatId, "‚ö†Ô∏è Xatolik! Matn ovozga aylantirilmadi.");
                }
                return;
            }

            // ‚úÖ 5Ô∏è‚É£ Agar tarjima rejimi yoqilgan bo‚Äòlsa
            if (userWaitingForTranslation.getOrDefault(chatId, false)) {
                System.out.println("üîπ Tarjima uchun matn olindi: " + text);
                processTranslation(chatId, text);
                return;
            }

            if (isAiMode && update.hasMessage() && update.getMessage().hasText()) {
                SendMessage warningMessage = new SendMessage();
                warningMessage.setChatId(chatId);
                warningMessage.setText("‚õî Kechirasiz, faqat audio yoki ovozli xabar yuborishingiz mumkin.");
                warningMessage.setReplyMarkup(getMainMenuInlineKeyboard());
                warningMessage.setParseMode("HTML");


                try {
                    execute(warningMessage);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }

                isAiMode = false; // AI rejimni o‚Äòchirib qo‚Äòyamiz
                return;
            }

            // ‚úÖ 6Ô∏è‚É£ Oddiy matn xabarlarni qayta ishlash
            System.out.println("üîπ Oddiy matn xabari olindi: " + text);
            handleTextMessage(chatId, text);
        }

    }

    private void handleTextMessage(long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);

        if (isAiMode) {
            sendAudioMessage(chatId, text);
            isAiMode = false;
            return;
        }
        if (textSpeech) {
            sendAudioMessage(chatId, text);
            textSpeech = false;
            return;
        }

        userWaitingForTranslation.put(chatId, false);

        switch (text) {
            case "/start":
                textSpeech = false;
                autoMode = false;
                isAiMode = false;
                sendMessage.setParseMode("HTML");

                User user = dbService.getUserById(chatId);
                if (user == null) {
                    user = new User(chatId, userName, firstName, lastName, startTime, 0, 0, 0, 0, false);
                    dbService.saveUser(user);
                }

                dbService.addScore(chatId, 1);

                boolean isPremium = user.isPremium();
                String premiumStatus = isPremium
                        ? "üíé <b>Siz premium foydalanuvchisiz!</b>\nMaxsus xizmatlardan foydalanishingiz mumkin. ‚úÖ"
                        : "üü† <b>Siz oddiy foydalanuvchisiz.</b>\nPremium olish orqali qo‚Äòshimcha imkoniyatlarga ega bo‚Äòling!";

                sendMessage.setText(String.format("""
                        <b>üëã Assalomu alaykum!</b>\n
                        ü§ñ <b>Men - English Support Bot!</b>\n
                        üìö <b>Ingliz tilini o‚Äòrganishingizga yordam beraman!</b>\n
                        <i>üîπ O‚Äòqish, yozish, eshitish va gapirish ko‚Äònikmalaringizni rivojlantirish uchun maxsus xizmatlarim bor!</i>\n\n
                        üõ† <b>Mening asosiy imkoniyatlarim:</b>\n
                        üéô <b>Ovozdan matnga aylantirish</b> ‚Äì Audio xabarlaringizni matnga o‚Äògiraman.\n
                        üåç <b>Matn tarjimasi</b> ‚Äì Ingliz va o‚Äòzbek tillari orasida tezkor tarjima qilaman.\n
                        üìñ <b>Grammatik qoidalar</b> ‚Äì Ingliz tili grammatikasini tushuntiraman.\n
                        üéØ <b>Testlar</b> ‚Äì Ingliz tilida bilim darajangizni tekshirishingiz mumkin.\n
                        ü§ñ <b>AI bilan suhbat</b> ‚Äì Sun‚Äôiy intellekt bilan muloqot qilib, savollaringizga javob olasiz.\n
                        üèÜ <b>Top foydalanuvchilar</b> ‚Äì Botdan eng ko‚Äòp foydalanganlarni ko‚Äòrishingiz mumkin!\n\n
                        %s\n
                        üìå <b>Quyidagi bo‚Äòlimlardan birini tanlang:</b>
                        """, premiumStatus));

                sendMessage.setReplyMarkup(getMainInlineKeyboard());
                break;
            case "/help":
                sendMessage(chatId, """
        üìñ <b>Telegram Botdan Foydalanish Qo‚Äòllanmasi</b>
        
    Bu qo‚Äòllanma AI yordamchi botidan qanday foydalanish haqida to‚Äòliq ma‚Äôlumot beradi.  
    Bot yordamida siz ovozli xabarlarni matnga aylantirib, ChatGPT javobini eshitishingiz mumkin.  
        
    üîπ <b>1. Botdan foydalanish</b>  
        Bot yordamida quyidagi vazifalarni bajarishingiz mumkin:  
        ‚úîÔ∏è Ovozli xabarlarni matnga aylantirish  
        ‚úîÔ∏è AI bilan suhbatlashish (ChatGPT)  
        ‚úîÔ∏è AI javobini ovoz shaklida olish  
        ‚úîÔ∏è Asosiy menyuga qaytish  
        
    üé§ <b>2. Ovozli xabar yuborish</b>  
        1Ô∏è‚É£ Telegram botga kiring  
        2Ô∏è‚É£ Mikrofon tugmachasini bosib, savolingizni ovozli xabar sifatida yuboring  
        3Ô∏è‚É£ Bot xabarni qabul qilib, matnga o‚Äògiradi va AI javobini tayyorlaydi  
        4Ô∏è‚É£ Tayyor bo‚Äòlgach, sizga ChatGPT ning ovozli javobini yuboradi  
        
        ‚è≥ <b>Jarayon davom etmoqda...</b>  
        Sizga bildirishnoma keladi:  
        <i>"Ovozli xabar tahlil qilinmoqda, biroz kuting..."</i>  
        
    üîÑ <b>Matnni aniqlash tugagandan so‚Äòng:</b>  
        - AI javobini matn ko‚Äòrinishida ko‚Äòrasiz  
        - Ovozli javob ham yuboriladi  
        
    üìå <b>3. ChatGPT bilan suhbatlashish</b>  
        Ovozli xabaringizdan so‚Äòng ChatGPT javobi ovozli va matn shaklida yuboriladi.  
        Agar yana savolingiz bo‚Äòlsa, yangi ovozli xabar yuboring.  
        
    üé∂ <b>Ovozli javob namunasi:</b>  
        <i>"Sizning AI yordamchingizning ovozli javobi!"</i>  
        
    ‚úâÔ∏è <b>Qo‚Äòshimcha matn:</b>  
        <i>"Agar yana savolingiz bo‚Äòlsa, yangi ovozli xabar yuboring."</i>  
        
    ‚¨ÖÔ∏è <b>4. Asosiy menyuga qaytish</b>  
        Agar asosiy menyuga qaytmoqchi bo‚Äòlsangiz:  
        üìå "Asosiy menyuga qaytish" tugmachasini bosing.  
        üìå Bot sizni asosiy interfeysga qaytaradi.  
        
    üöÄ <b>5. Qo‚Äòllab-quvvatlash</b>  
        Agar bot bilan bog‚Äòliq muammolarga duch kelsangiz:  
    üì© Admin bilan bog‚Äòlaning  
  
        
     ‚úÖ <b>Tayyor! Endi botdan bemalol foydalanishingiz mumkin!</b> üéâ
    """);
              break;



            default:
                sendMessage.setParseMode("HTML");
                sendMessage.setText("‚ö†Ô∏è <b>Bunday buyruq mavjud emas!</b>\n\n"
                        + "üîπ Quyidagi menyudan kerakli bo‚Äòlimni tanlang:");
                sendMessage.setReplyMarkup(getMainMenuInlineKeyboard());
                break;
        }

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void processCallbackQuery(CallbackQuery callbackQuery) {
        long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();


        // üìå **Grammatik qoida tanlandi**
        if (data.equals("grammar_guide")) {
            sendGrammarMenu(chatId);
            return;
        }

        if (data.startsWith("grammar_")) {
            processGrammarSelection(chatId, data);
            return;
        }

        // üìå **Tarjima bo‚Äòlimi**
        if (data.startsWith("translate_")) {
            processTranslationSelection(chatId, data);
            return;
        }

        // üìå **Testni boshlash**
        if (data.startsWith("level_")) {
            startTest(chatId, data);
            return;
        }

        // üìå **Foydalanuvchi javobi (test)**
        if (data.startsWith("answer_")) {
            if (userTests.containsKey(chatId)) {
                processTestQuestionAnswer(callbackQuery);
            } else if (userQuestions.containsKey(chatId)) {
                processQuestionsAnswer(callbackQuery);
            }
            return;
        }


        handleInlineMenuActions(chatId, callbackQuery);
    }

    private void handleInlineMenuActions(long chatId, CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId);
        message.setMessageId(callbackQuery.getMessage().getMessageId());

        if (message == null) {
            System.out.println("‚ö†Ô∏è Xatolik: callbackQuery.getMessage() null!");
            return;
        }

        String text = "";
        InlineKeyboardMarkup replyMarkup = null;
        String isAiText;

        switch (data) {
            case "convert_voice" -> {
                autoMode = true;
                dbService.addScore(chatId, 3);
                text = "üéô <b>Ovozdan matnga aylantirish</b>\n\n" +
                        "üîπ Ushbu xizmat orqali ovozli xabarlaringizni matnga aylantirishingiz mumkin.\n\n" +
                        "<i>üó£ Ovozli xabar yuboring va biz uni matnga o‚Äògirib beramiz.</i>";
            }

            case "instant_translation" -> {
                dbService.addScore(chatId, 3);
                text = "üåç <b>Matn tarjima qilish</b>\n\n" +
                        "üîπ Ingliz va o‚Äòzbek tillari o‚Äòrtasida tezkor tarjima xizmati.\n\n" +
                        "<i>‚úçÔ∏è Tarjima qilinishi kerak bo‚Äòlgan matnni yuboring.</i>";
                replyMarkup = getTranslateInlineKeyboard();
                userWaitingForTranslation.put(chatId, true);
            }

            case "level_test" -> {
                dbService.addScore(chatId, 3);
                text = "üìä <b>Ingliz tili daraja testi</b>\n\n" +
                        "üîπ Sizning ingliz tilidagi bilim darajangizni aniqlash uchun maxsus testlar.\n\n" +
                        "<i>üìå Daraja tanlang va test savollariga javob bering.</i>";
                replyMarkup = getLevelSelectionInlineKeyboard();
            }

            case "voice_Menu" -> {
                dbService.addScore(chatId, 3);
                text = "üéô <b>Ovozli xizmatlar</b>\n\n" +
                        "üîπ Quyidagi ovozli xizmatlardan birini tanlang:";
                replyMarkup = getVoiseInlineKeyboard();
            }

            case "convert_text" -> {
                dbService.addScore(chatId, 3);
                textSpeech = true;
                text = "üìú <b>Matndan ovozga aylantirish</b>\n\n" +
                        "üîπ Siz matnni ovozli xabarga aylantirish xizmatidan foydalanmoqdasiz.\n\n" +
                        "<i>‚úçÔ∏è Matn yuboring va biz uni ovozli xabar shaklida qaytaramiz.</i>";
            }

            case "Grammer_reset" -> {
                dbService.addScore(chatId, 3);
                text = "üìñ <b>Ingliz tili grammatikasi</b>\n\n" +
                        "üîπ Ingliz tili grammatikasi bo‚Äòyicha qo‚Äòllanmalar.\n\n" +
                        "<i>üìå Quyidagi ro‚Äòyxatdan kerakli bo‚Äòlimni tanlang.</i>";
                replyMarkup = sendGrammarList(chatId);
            }

            case "info_menu" -> {
                dbService.addScore(chatId, 3);
                boolean isPremium = dbService.getUserById(chatId).isPremium();

                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(chatId);
                sendMessage.setParseMode("HTML");
                sendMessage.setText("""
                            ‚ÑπÔ∏è <b>Qo‚Äòllanma va Ma‚Äôlumot</b>
                        
                        Assalomu alaykum! üòä Ushbu bo‚Äòlimda siz botdan foydalanish bo‚Äòyicha barcha kerakli ma‚Äôlumotlarni topasiz. 
                        
                        üìú <b>Bot haqida</b> ‚Äì Ushbu bot nima uchun yaratilgan va qanday ishlashini bilib oling.  
                        üìñ <b>Qo‚Äòllanma</b> ‚Äì Botdagi funksiyalarni qanday ishlatish haqida to‚Äòliq qo‚Äòllanma.  
                        üíé <b>Premium sotib olish</b> ‚Äì Maxsus imkoniyatlardan foydalanish uchun premium versiyaga o‚Äòtish (faqat oddiy foydalanuvchilar uchun).  
                        
                            üéØ Har qanday savollaringiz bo‚Äòlsa, biz bilan bog‚Äòlaning!
                        """);

                sendMessage.setReplyMarkup(getHelpInlineKeyboard(isPremium));

                try {
                    execute(sendMessage);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }

            case "aicallback" -> {
                dbService.addScore(chatId, 3);
                isAiMode = true;
                isAiText = "ü§ñ <b>AI bilan suhbat</b>\n\n" +
                        "üîπ Sun‚Äôiy intellekt bilan faqat <b>ovozli xabar</b> orqali muloqot qilishingiz mumkin.\n\n" +
                        "<i>üé§ Mikrofon tugmasini bosib, savolingizni ovozli xabar sifatida yuboring.</i>";

                sendMessage(chatId, isAiText); // Faqat AI haqida xabar yuboriladi, mainMenu chaqirilmaydi
            }

            case "back_main" -> {
                text = "üè† <b>Bosh menyu</b>\n\n" +
                        "üîπ Asosiy menyuga qaytdingiz. Quyidagi variantlardan birini tanlashingiz mumkin:";
                replyMarkup = getMainInlineKeyboard();
            }

            case "buy_premium" -> {
                User user = dbService.getUserById(chatId);

                if (user == null) {
                    sendTextMessage(chatId, "‚ö†Ô∏è <b>Foydalanuvchi topilmadi!</b>");
                    return;
                }

                if (user.getScore() >= 30) {
                    user.setPremium(true);
                    user.setScore(user.getScore() - 30);
                    dbService.updateUser(user);

                    sendTextMessage(chatId, "‚úÖ <b>Tabriklaymiz!</b>\n\n"
                            + "Siz endi <b>Premium</b> foydalanuvchisiz! üíé\n"
                            + "Premium imkoniyatlardan bemalol foydalanishingiz mumkin.");

                    MyAccount(chatId); // Yangilangan hisob ma'lumotlarini qayta chiqarish
                } else {
                    sendTextMessage(chatId, "‚ùå <b>Kechirasiz!</b>\n\n"
                            + "Premium sotib olish uchun kamida <b>30 ball</b> kerak.\n"
                            + "Hozirgi ballingiz: <b>" + user.getScore() + "</b>\n"
                            + "Ball yig‚Äòish uchun botdan faol foydalaning.");
                }
            }

            case "about_bot" -> {
                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(chatId);
                sendMessage.setParseMode("HTML");
                sendMessage.setText("""
                            ü§ñ <b>Bot haqida</b>
                        
                        Assalomu alaykum! üòä Ushbu bot sizga quyidagi imkoniyatlarni taqdim etadi:
                        
                        üîπ <b>Ovozdan matnga</b> ‚Äì Siz yozgan matnni ovozga aylantiradi va aksincha.  
                        üîπ <b>Matn tarjimasi</b> ‚Äì Ingliz va o‚Äòzbek tillari orasida tezkor tarjima.  
                        üîπ<b>Bilimni sinash</b> ‚Äì CEFR darajalari bo‚Äòyicha ingliz tilini sinovdan o‚Äòtkazing!  
                        üîπ <b>Grammatika qoidalari</b> ‚Äì Ingliz tili grammatikasini o‚Äòrganish uchun qulay qo‚Äòllanma.  
                        üîπ <b>AI suhbatdosh</b> ‚Äì Sun‚Äôiy intellekt bilan ingliz tilida muloqot qiling.  
                        üîπ <b>Reyting</b> ‚Äì Eng yaxshi natijalarga erishgan foydalanuvchilar ro‚Äòyxati.  
                        
                        üìå Bot sizning til o‚Äòrganish jarayoningizni oson va qiziqarli qilish uchun ishlab chiqilgan! 
                        
                        ‚ùì Yordam kerak bo‚Äòlsa, "Qo‚Äòllanma" bo‚Äòlimiga tashrif buyuring.
                        """);
                sendMessage.setReplyMarkup(getMainMenuInlineKeyboard());

                try {
                    execute(sendMessage);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }

            }

            case "user_guide" -> {
                sendMessage(chatId, """
        üìñ <b>Telegram Botdan Foydalanish Qo‚Äòllanmasi</b>
        
    Bu qo‚Äòllanma AI yordamchi botidan qanday foydalanish haqida to‚Äòliq ma‚Äôlumot beradi.  
    Bot yordamida siz ovozli xabarlarni matnga aylantirib, ChatGPT javobini eshitishingiz mumkin.  
        
    üîπ <b>1. Botdan foydalanish</b>  
        Bot yordamida quyidagi vazifalarni bajarishingiz mumkin:  
        ‚úîÔ∏è Ovozli xabarlarni matnga aylantirish  
        ‚úîÔ∏è AI bilan suhbatlashish (ChatGPT)  
        ‚úîÔ∏è AI javobini ovoz shaklida olish  
        ‚úîÔ∏è Asosiy menyuga qaytish  
        
    üé§ <b>2. Ovozli xabar yuborish</b>  
        1Ô∏è‚É£ Telegram botga kiring  
        2Ô∏è‚É£ Mikrofon tugmachasini bosib, savolingizni ovozli xabar sifatida yuboring  
        3Ô∏è‚É£ Bot xabarni qabul qilib, matnga o‚Äògiradi va AI javobini tayyorlaydi  
        4Ô∏è‚É£ Tayyor bo‚Äòlgach, sizga ChatGPT ning ovozli javobini yuboradi  
        
        ‚è≥ <b>Jarayon davom etmoqda...</b>  
        Sizga bildirishnoma keladi:  
        <i>"Ovozli xabar tahlil qilinmoqda, biroz kuting..."</i>  
        
    üîÑ <b>Matnni aniqlash tugagandan so‚Äòng:</b>  
        - AI javobini matn ko‚Äòrinishida ko‚Äòrasiz  
        - Ovozli javob ham yuboriladi  
        
    üìå <b>3. ChatGPT bilan suhbatlashish</b>  
        Ovozli xabaringizdan so‚Äòng ChatGPT javobi ovozli va matn shaklida yuboriladi.  
        Agar yana savolingiz bo‚Äòlsa, yangi ovozli xabar yuboring.  
        
    üé∂ <b>Ovozli javob namunasi:</b>  
        <i>"Sizning AI yordamchingizning ovozli javobi!"</i>  
        
    ‚úâÔ∏è <b>Qo‚Äòshimcha matn:</b>  
        <i>"Agar yana savolingiz bo‚Äòlsa, yangi ovozli xabar yuboring."</i>  
        
    ‚¨ÖÔ∏è <b>4. Asosiy menyuga qaytish</b>  
        Agar asosiy menyuga qaytmoqchi bo‚Äòlsangiz:  
        üìå "Asosiy menyuga qaytish" tugmachasini bosing.  
        üìå Bot sizni asosiy interfeysga qaytaradi.  
        
    üöÄ <b>5. Qo‚Äòllab-quvvatlash</b>  
        Agar bot bilan bog‚Äòliq muammolarga duch kelsangiz:  
    üì© Admin bilan bog‚Äòlaning  
  
        
     ‚úÖ <b>Tayyor! Endi botdan bemalol foydalanishingiz mumkin!</b> üéâ
    """);
                return;
            }

            case "back_help_menu" -> {
                replyMarkup = getMainInlineKeyboard();
            }

            case "audio_reset" -> {
                sendAudioRetryMessage(chatId);
                return;
            }

            case "retry_test" -> {
                retryTest(chatId);
                return;
            }

            case "top" -> {
                sendTopUsers(chatId);
                return;
            }

            case "questions", "Questions_reset" -> {
                sendQuestions(chatId);
                return;
            }

            case "Accaunt" -> {
                MyAccount(chatId);
                return;
            }

            default -> {
                text = "‚ö†Ô∏è <b>Noto‚Äòg‚Äòri buyruq!</b>\n\n" +
                        "üîπ Siz tanlagan buyruq noto‚Äòg‚Äòri yoki mavjud emas.\n\n" +
                        "<i>üìå Quyidagi tugmalardan birini tanlang:</i>";
                replyMarkup = getMainInlineKeyboard();
            }
        }

        message.setParseMode("HTML");
        message.setText(text);
        message.setReplyMarkup(replyMarkup);
        sendEditMessage(message);
    }

    private void sendMessage(long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(text);
        sendMessage.setParseMode("HTML");
        sendMessage.setReplyMarkup(getMainMenuInlineKeyboard());
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }

    }


    private void openAiText(long chatId, String fileId) {
        try {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setParseMode("HTML");
            sendMessage.setText("‚è≥ <b>Jarayon davom etmoqda, biroz kuting...</b>\n\nüîç <i>Ovozli xabar tahlil qilinmoqda...</i>");
            Message message = execute(sendMessage);

            String audioUrl = getAudioFileUrl(fileId);
            var ref = new Object() {
                String transcribedText = transcribeAudioWithDeepgram(audioUrl);
            };
            if (ref.transcribedText == null || ref.transcribedText.trim().isEmpty()) {
                ref.transcribedText = "‚ö†Ô∏è Ovozli xabarda matn aniqlanmadi!";
            }

            CompletableFuture.runAsync(() -> {
                String gptResponse = chatWithGPT(ref.transcribedText);
                if (gptResponse == null || gptResponse.trim().isEmpty()) {
                    gptResponse = "‚ö†Ô∏è ChatGPT javobi olinmadi.";
                }

                String audioPath = convertTextToSpeech(gptResponse);
                if (audioPath == null) {
                    EditMessageText finalMessage = new EditMessageText();
                    finalMessage.setChatId(chatId);
                    finalMessage.setMessageId(message.getMessageId());
                    finalMessage.setParseMode("HTML");
                    finalMessage.setText("‚ö†Ô∏è Ovozli xabar yaratishda xatolik yuz berdi.");
                    try {
                        execute(finalMessage);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    return;
                }
                sendAiVoice(chatId, audioPath);
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendAiVoice(long chatId, String audioPath) {
        File audioFile = new File(audioPath);
        if (audioFile.length() > 50 * 1024 * 1024) {
            sendTextMessage(chatId, "‚ö†Ô∏è Xatolik: Fayl hajmi 50MB dan oshib ketdi!");
            return;
        }

        SendAudio sendAudio = new SendAudio();
        sendAudio.setChatId(chatId);
        sendAudio.setAudio(new InputFile(audioFile));
        sendAudio.setParseMode("HTML");
        sendAudio.setCaption("""
                üé∂ <b>Sizning AI yordamchingizning ovozli javobi!</b>
                
                üîÑ <i>Agar yana savolingiz bo‚Äòlsa, yangi ovozli xabar yuboring.</i>
                """);

        try {
            execute(sendAudio);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
        executor.schedule(() -> {
            if (audioFile.exists() && !audioFile.delete()) {
                System.out.println("‚ö†Ô∏è Fayl o‚Äòchirilmadi: " + audioPath);
            }
        }, 10, TimeUnit.MINUTES);
    }

    public String chatWithGPT(String userMessage) {
        try (AsyncHttpClient client = new DefaultAsyncHttpClient()) {
            // ‚úÖ JSON so‚Äòrovni shakllantirish
            JSONObject jsonRequest = new JSONObject()
                    .put("model", "gpt-3.5-turbo")
                    .put("messages", new JSONArray().put(new JSONObject()
                            .put("role", "user")
                            .put("content", userMessage)));

            // ‚úÖ API ga so‚Äòrov yuborish
            ListenableFuture<Response> futureResponse = client.prepare("POST", RAPIDAPI_URL)
                    .setHeader("x-rapidapi-key", RAPIDAPI_KEY)
                    .setHeader("x-rapidapi-host", RAPIDAPI_HOST)
                    .setHeader("Content-Type", "application/json")
                    .setBody(jsonRequest.toString())
                    .execute();

            // ‚úÖ Javobni kutish
            Response response = futureResponse.toCompletableFuture().get(10, TimeUnit.SECONDS);

            return extractGPTResponseText(response.getResponseBody());
        } catch (TimeoutException e) {
            return "‚ö†Ô∏è ChatGPT serveri javob bermadi, iltimos keyinroq urinib ko‚Äòring.";
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ö†Ô∏è ChatGPT bilan bog‚Äòlanishda xatolik yuz berdi.";
        }
    }

    private String extractGPTResponseText(String jsonResponse) {
        try {
            JSONObject jsonObject = new JSONObject(jsonResponse);

            if (!jsonObject.has("choices")) {
                return "‚ö†Ô∏è ChatGPT javobida 'choices' mavjud emas.";
            }

            JSONArray choices = jsonObject.getJSONArray("choices");
            if (choices.length() == 0) {
                return "‚ö†Ô∏è ChatGPT javobi olinmadi.";
            }

            // ‚úÖ ChatGPT javobining asosiy qismi
            return choices.getJSONObject(0).getJSONObject("message").getString("content");
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ö†Ô∏è ChatGPT API javobini o‚Äòqishda xatolik.";
        }
    }


    private void sendAccount(long chatId, String message, boolean isPremium) {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // üîπ Asosiy tugmalar
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton("üîô Bosh menyu");
        backButton.setCallbackData("back_main");
        row1.add(backButton);
        buttons.add(row1);

        // üîπ Agar foydalanuvchi premium bo'lmasa, "Premium sotib olish" tugmasini qo'shamiz
        if (!isPremium) {
            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton buyPremiumButton = new InlineKeyboardButton("üíé Premium sotib olish (30 ball)");
            buyPremiumButton.setCallbackData("buy_premium");
            row2.add(buyPremiumButton);
            buttons.add(row2);
        }

        inlineKeyboard.setKeyboard(buttons);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setParseMode("HTML");
        sendMessage.setText(message);
        sendMessage.setReplyMarkup(inlineKeyboard);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void MyAccount(long chatId) {
        User user = dbService.getUserById(chatId);

        if (user == null) {
            sendTextMessage(chatId, "‚ö†Ô∏è <b>Foydalanuvchi topilmadi!</b>");
            return;
        }

        System.out.println("Premium status: " + user.isPremium());

        int score = user.getScore();
        int bestScore = user.getBestScore();
        int todayScore = user.getTodayScore();
        int weeklyScore = user.getWeeklyScore();
        boolean isPremium = user.isPremium();

        String rank;
        int nextLevel = 0;

        if (score >= 100) {
            rank = "ü•á <b>Grand Master</b>";
        } else if (score >= 50) {
            rank = "ü•à <b>Master</b>";
            nextLevel = 100 - score;
        } else if (score >= 30) {
            rank = "ü•â <b>Expert</b>";
            nextLevel = 50 - score;
        } else if (score >= 15) {
            rank = "üéñ <b>Advanced Learner</b>";
            nextLevel = 30 - score;
        } else {
            rank = "‚≠ê <b>Beginner</b>";
            nextLevel = 15 - score;
        }

        // üîπ Premium status
        String premiumStatus = isPremium
                ? "üíé <b>Premium foydalanuvchi ‚úÖ</b>"
                : "üü† <b>Oddiy foydalanuvchi ‚ùå</b>";

        // üîπ Keyingi darajaga necha ball kerakligini ko'rsatish
        String nextLevelMessage = (nextLevel > 0)
                ? "üöÄ <b>Keyingi darajaga chiqish uchun yana <u>" + nextLevel + " ball</u> kerak!</b>\n"
                : "üî• <b>Siz eng yuqori darajadasiz!</b>\n";

        // üìå Hisob ma'lumotlarini chiroyli formatda chiqarish
        String message = String.format("""
                <b>üë§ Sizning hisobingiz</b>\n
                ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n
                ‚îÉ üéØ <b>Jami ball:</b> %d\n
                ‚îÉ üèÜ <b>Eng yaxshi natija:</b> %d\n
                ‚îÉ üìÖ <b>Bugungi ball:</b> %d\n
                ‚îÉ üìä <b>Haftalik ball:</b> %d\n
                ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n
                üìñ <b>Daraja:</b> %s\n
                %s\n
                %s
                üí° <i>Ballaringizni premium imkoniyatlarga ishlatishingiz mumkin!</i>
                """, score, bestScore, todayScore, weeklyScore, rank, premiumStatus, nextLevelMessage);

        sendAccount(chatId, message, isPremium);
    }

    private void sendTextMessage(long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(text);
        sendMessage.setParseMode("HTML"); // ‚úÖ HTML format qo‚Äòshildi

        try {
            sendMessage.setReplyMarkup(getMainMenuInlineKeyboard());
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void startTest(long chatId, String levelData) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);

        // üîπ Tugmadan kelgan ma'lumotni CEFR darajasiga o‚Äòtkazish
        Map<String, String> levelMap = Map.of(
                "level_a1", "A1 (Boshlang‚Äòich)",
                "level_a2", "A2 (Elementar)",
                "level_b1", "B1 (O‚Äòrta)",
                "level_b2", "B2 (O‚Äòrta-yuqori)",
                "level_c1", "C1 (Ilg‚Äòor)",
                "level_c2", "C2 (Mukammal)"
        );

        String levelKey = levelMap.getOrDefault(levelData, "");

        if (levelKey.isEmpty()) {
            sendMessage.setText("‚ö†Ô∏è <b>Iltimos, mavjud darajalardan birini tanlang!</b> ‚úÖ");
            sendMessage.setParseMode("HTML");
            sendMessage.setReplyMarkup(getLevelSelectionInlineKeyboard());
            sendMessageSafely(sendMessage);
            return;
        }

        // üîπ Testlarni bazadan olish
        List<TestQuestion> questions = dbService.getTenRandomTestsByLevel(levelKey.substring(0, 2));
        if (questions.isEmpty()) {
            sendMessage.setText("‚ùå <b>Kechirasiz!</b> Tanlangan daraja uchun testlar mavjud emas. üîÑ Boshqa darajani tanlang.");
            sendMessage.setParseMode("HTML");
            sendMessage.setReplyMarkup(getLevelSelectionInlineKeyboard());
            sendMessageSafely(sendMessage);
            return;
        }

        // üîπ Testni boshlash
        userTests.put(chatId, questions);
        userScores.put(chatId, 0);
        userCurrentQuestion.put(chatId, 0);

        sendMessage.setText(String.format("""
                üéÆ <b>%s</b> darajadagi test boshlandi!
                
                üèÜ Siz hozir bilim sinov o‚Äòyinidasiz!  
                üß† Har bir savol sizni yangi darajaga olib chiqadi.  
                
                üéØ Diqqat bilan o‚Äòylab, to‚Äòg‚Äòri javob bering!  
                
                üîé Boshladik!
                """, levelKey));

        sendMessage.setParseMode("HTML");
        sendMessageSafely(sendMessage);

        sendNextTestQuestion(chatId);
    }

    private void sendMessageSafely(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendNextTestQuestion(long chatId) {
        List<TestQuestion> questions = userTests.get(chatId);
        int currentIndex = userCurrentQuestion.getOrDefault(chatId, 0);

        // ‚ùó Xatolikni oldini olish
        if (questions == null || questions.isEmpty()) {
            sendTextMessage(chatId, "‚ùå <b>Xatolik:</b> Savollar topilmadi yoki mavjud emas.");
            return;
        }

        // üîπ Test tugaganligini tekshirish
        if (currentIndex >= questions.size()) {
            finishTest(chatId);
            return;
        }

        TestQuestion question = questions.get(currentIndex);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInlineButton("A) " + question.getOptionA(), "answer_A_" + question.getId()));
        row1.add(createInlineButton("B) " + question.getOptionB(), "answer_B_" + question.getId()));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInlineButton("C) " + question.getOptionC(), "answer_C_" + question.getId()));
        row2.add(createInlineButton("D) " + question.getOptionD(), "answer_D_" + question.getId()));

        keyboard.add(row1);
        keyboard.add(row2);
        inlineKeyboardMarkup.setKeyboard(keyboard);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setParseMode("HTML");
        sendMessage.setText("üìå <b>Test " + (currentIndex + 1) + "/" + questions.size() + ":</b>\n\n"
                + question.getQuestion() + "\n\n"
                + "üëá <b>Javobni tanlang</b>:");

        sendMessage.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(sendMessage);
            userCurrentQuestion.put(chatId, currentIndex + 1); // üîπ Keyingi savolga o'tish
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void checkAndProcessAnswer(long chatId, String userAnswer) {
        List<TestQuestion> questions = userTests.get(chatId);
        int currentIndex = userCurrentQuestion.get(chatId);

        if (currentIndex < questions.size()) {
            TestQuestion currentQuestion = questions.get(currentIndex);
            boolean isCorrect = dbService.checkAnswer(currentQuestion.getId(), userAnswer.toUpperCase().charAt(0));

            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setParseMode("HTML"); // ‚úÖ HTML formatini ishlatish

            if (isCorrect) {
                sendMessage.setText("‚úÖ <b>To‚Äòg‚Äòri javob!</b> üéâ");
            } else {
                sendMessage.setText(
                        "‚ùå <b>Noto‚Äòg‚Äòri javob!</b> üòû\n\n" +
                                "‚úîÔ∏è <b>To‚Äòg‚Äòri javob:</b> <code>" + currentQuestion.getCorrectAnswer() + "</code>"
                );
            }

            try {
                execute(sendMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }

            // ‚úÖ Keyingi savolga o‚Äòtish yoki testni tugatish
            userCurrentQuestion.put(chatId, currentIndex + 1);
            if (currentIndex + 1 < questions.size()) {
                sendNextTestQuestion(chatId);
            } else {
                finishTest(chatId); // ‚úÖ Test tugasa yakunlash funksiyasini chaqirish
            }
        }
    }

    private void processTestQuestionAnswer(CallbackQuery callbackQuery) {
        long chatId = callbackQuery.getMessage().getChatId();
        String userAnswer = callbackQuery.getData().substring(7); // "answer_A_123" -> "A"

        List<TestQuestion> questions = userTests.get(chatId);
        int currentIndex = userCurrentQuestion.getOrDefault(chatId, 0) - 1; // ‚úÖ Indexni to‚Äòg‚Äòri olish

        // ‚ùó Xatolikni oldini olish
        if (questions == null || questions.isEmpty() || currentIndex < 0 || currentIndex >= questions.size()) {
            sendTextMessage(chatId, "‚ö†Ô∏è <b>Xatolik:</b> Savol topilmadi yoki noto‚Äòg‚Äòri indeks.");
            return;
        }

        TestQuestion currentQuestion = questions.get(currentIndex);
        boolean isCorrect = dbService.checkAnswer(currentQuestion.getId(), userAnswer.charAt(0));

        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(chatId);
        editMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        editMessage.setParseMode("HTML");

        if (isCorrect) {
            int currentScore = userScores.getOrDefault(chatId, 0) + 1; // ‚úÖ Ballni oshiramiz
            userScores.put(chatId, currentScore); // ‚úÖ Yangilangan ballni saqlaymiz

            editMessage.setText("‚úÖ <b>To‚Äòg‚Äòri javob!</b> üéâ");
        } else {
            editMessage.setText("‚ùå <b>Noto‚Äòg‚Äòri javob!</b> üòû\n\n"
                    + "‚úîÔ∏è <b>To‚Äòg‚Äòri javob:</b> <code>" + currentQuestion.getCorrectAnswer() + "</code>\n\n"
                    + "üîÑ Keyingi savolga o‚Äòting! üí™");
        }

        try {
            execute(editMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // üîπ Keyingi savolga o‚Äòtish yoki testni tugatish
        userCurrentQuestion.put(chatId, currentIndex + 1);
        if (currentIndex + 1 < questions.size()) {
            sendNextTestQuestion(chatId);
        } else {
            finishTest(chatId); // ‚úÖ Test tugaganida yakuniy natijani chiqarish
        }
    }

    private void finishTest(long chatId) {
        int score = userScores.getOrDefault(chatId, 0);
        int totalQuestions = userTests.get(chatId).size();
        double percentage = ((double) score / totalQuestions) * 100;

        StringBuilder resultMessage = new StringBuilder();
        resultMessage.append("<b>‚úÖ Test Yakunlandi!</b> üéØ\n\n")
                .append("<b>üìä Sizning natijangiz:</b> <code>").append(score).append("/").append(totalQuestions).append("</code>\n")
                .append("<b>üìà Foiz:</b> <code>").append(String.format("%.1f", percentage)).append("%</code>\n\n");

        if (percentage >= 60) {
            resultMessage.append("üéâ <b>Tabriklaymiz!</b> Sizning bilimingiz yuqori darajada! üî•");
        } else {
            resultMessage.append("‚ùå <b>Afsuski, siz imtihondan o'tolmadingiz.</b> üòû\nüìö <i>Ko'proq mashq qiling!</i>");
        }

        resultMessage.append("\n\n‚ùó <i>Eslatib o'tamiz, bu sizning aniq darajangiz emas.</i> \n")
                .append("üìö <b>O'qishlaringizga omad tilayman! üòä</b>");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton retryButton = new InlineKeyboardButton();
        retryButton.setText("üîÑ Testni Qayta Boshlash");
        retryButton.setCallbackData("retry_test");
        row1.add(retryButton);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton mainMenuButton = new InlineKeyboardButton();
        mainMenuButton.setText("üè† Asosiy Menyu");
        mainMenuButton.setCallbackData("back_main");
        row2.add(mainMenuButton);

        buttons.add(row1);
        buttons.add(row2);
        keyboard.setKeyboard(buttons);

        // ‚úÖ Xabarni yuborish
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setParseMode("HTML"); // ‚úÖ HTML format ishlatish
        sendMessage.setText(resultMessage.toString());
        sendMessage.setReplyMarkup(keyboard);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // üîπ Test ma'lumotlarini tozalash
        userTests.remove(chatId);
        userScores.remove(chatId);
        userCurrentQuestion.remove(chatId);
    }

    private void finishQuesting(long chatId) {
        int score = userScores.getOrDefault(chatId, 0);
        dbService.updateUserScore(chatId, score);

        // üîπ Progres panel
        String progressBar = "üèÖ ";
        for (int i = 1; i <= 10; i++) {
            if (i <= score) {
                progressBar += "üü©"; // ‚úÖ To‚Äòg‚Äòri javoblar
            } else {
                progressBar += "‚¨ú"; // ‚ùå Noto‚Äòg‚Äòri javoblar
            }
        }

        String resultMessage = "üéâ <b>Test yakunlandi!</b>\n\n"
                + "üìä <b>Natijangiz:</b>\n\n"
                + progressBar + "\n\n"
                + "üì¢ Siz <b>" + score + "</b> ta savolga to‚Äòg‚Äòri javob berdingiz!\n\n"
                + "üí™ Yana test ishlashni xohlaysizmi?";

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setParseMode("HTML");
        sendMessage.setText(resultMessage);
        sendMessage.setReplyMarkup(getRetryTestKeyboard());

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void processQuestionsAnswer(CallbackQuery callbackQuery) {
        long chatId = callbackQuery.getMessage().getChatId();
        String userAnswer = callbackQuery.getData().substring(7); // "answer_A_123" -> "A"

        List<Questions> questions = userQuestions.get(chatId);
        int currentIndex = userCurrentQuestion.getOrDefault(chatId, 0) - 1;

        if (questions == null || questions.isEmpty() || currentIndex < 0 || currentIndex >= questions.size()) {
            sendTextMessage(chatId, "‚ö†Ô∏è <b>Xatolik:</b> Savol topilmadi yoki noto‚Äòg‚Äòri indeks.");
            return;
        }

        Questions currentQuestion = questions.get(currentIndex);
        boolean isCorrect = dbService.checkAnswerForQuestions(currentQuestion.getId(), userAnswer.charAt(0));

        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(chatId);
        editMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        editMessage.setParseMode("HTML");

        int currentScore = userScores.getOrDefault(chatId, 0); // ‚úÖ Avvalgi natijani olish
        if (isCorrect) {
            currentScore++; // ‚úÖ Ballni faqat bitta qo‚Äòshish
            userScores.put(chatId, currentScore); // ‚úÖ Mahalliy xotirada yangilash
            dbService.updateUserScore(chatId, currentScore); // ‚úÖ Faqat umumiy natijani yangilash
            editMessage.setText("‚úÖ <b>To‚Äòg‚Äòri javob!</b> Sizga <b>+1 ball</b> qo‚Äòshildi. üéâ");
        } else {
            editMessage.setText("‚ùå <b>Noto‚Äòg‚Äòri javob!</b> üòû\n\n"
                    + "‚ùì <b>Savol:</b> " + currentQuestion.getQuestion() + "\n\n"
                    + "‚úîÔ∏è <b>To‚Äòg‚Äòri javob:</b> <code>" + currentQuestion.getCorrectOption() + "</code>\n\n"
                    + "üîÑ Keyingi savolga o‚Äòting! üí™");
        }

        try {
            execute(editMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // ‚úÖ Keyingi savolga o'tish yoki testni tugatish
        if (currentIndex + 1 < questions.size()) {
            sendNextQuestion(chatId);
        } else {
            finishQuesting(chatId);
        }
    }

    private void sendQuestions(long chatId) {
        List<Questions> questions = dbService.getRandomQuestions(10); // ‚úÖ 10 ta tasodifiy savol olish

        if (questions == null || questions.isEmpty()) {
            sendTextMessage(chatId, "‚ùå Xatolik: Test savollari topilmadi.");
            return;
        }

        userQuestions.put(chatId, questions);
        userScores.put(chatId, 0);
        userCurrentQuestion.put(chatId, 0);

        sendNextQuestion(chatId);
    }

    private void sendNextQuestion(long chatId) {
        List<Questions> questions = userQuestions.get(chatId);
        int currentIndex = userCurrentQuestion.getOrDefault(chatId, 0);

        if (questions == null || questions.isEmpty() || currentIndex >= questions.size()) {
            finishQuesting(chatId);
            return;
        }

        Questions question = questions.get(currentIndex);


        // üîπ Inline tugmalarni yaratish
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        keyboard.add(List.of(createInlineButton("A) " + question.getOptionA(), "answer_A_" + question.getId())));
        keyboard.add(List.of(createInlineButton("B) " + question.getOptionB(), "answer_B_" + question.getId())));
        keyboard.add(List.of(createInlineButton("C) " + question.getOptionC(), "answer_C_" + question.getId())));
        keyboard.add(List.of(createInlineButton("D) " + question.getOptionD(), "answer_D_" + question.getId())));

        inlineKeyboardMarkup.setKeyboard(keyboard);


        // ‚úÖ Savolni yuborish uchun matnni chiroyli shakllantirish
        String questionText = """
                üìå <b>Test %d/%d</b>
                
                üî•<b>Faqat oldinga! Harakat - muvaffaqiyat kaliti! </b>
                
                
                ‚ùì <b>Savol:</b> %s
                
                
                üîΩ <b>Javobni tanlang</b>:
                """.formatted(currentIndex + 1, questions.size(), question.getQuestion());


        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setParseMode("HTML");
        sendMessage.setText(questionText);

        sendMessage.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(sendMessage);
            userCurrentQuestion.put(chatId, currentIndex + 1); // ‚úÖ Keyingi savolga o'tish
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendTopUsers(long chatId) {
        List<User> topUsers = dbService.getTopUsers(10, "score"); // üîπ Eng yaxshi foydalanuvchilarni olish

        if (topUsers.isEmpty()) {
            sendTextMessage(chatId, "üìä <b>Top foydalanuvchilar hali yo‚Äòq!</b>");
            return;
        }

        StringBuilder messageText = new StringBuilder("üèÜ <b>TOP 10 Foydalanuvchilar</b>\n");
        messageText.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

        int rank = 1;
        for (User user : topUsers) {
            String status = switch (rank) {
                case 1 -> "ü•á Grand Master"; // 1-o‚Äòrin
                case 2 -> "ü•à Master"; // 2-o‚Äòrin
                case 3 -> "ü•â Expert"; // 3-o‚Äòrin
                case 4, 5, 6, 7, 8, 9, 10 -> "üéñ Advanced Learner"; // 4-10-o‚Äòrin
                default -> "‚≠ê Beginner"; // Keyingi o‚Äòrinlar
            };

            String premiumBadge = user.isPremium() ? " üíé Premium" : ""; // ‚úÖ Premium foydalanuvchilar uchun belgi

            String firstName = (user.getFirstName() != null) ? escapeHtml(user.getFirstName()) : "<i>Ism yo‚Äòq</i>";

            messageText.append(String.format(
                    "<b>%d.</b> %s - <b>%d</b> ball\nüèÖ %s%s\n\n",
                    rank++, firstName, user.getScore(), status, premiumBadge
            ));
        }

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setParseMode("HTML");
        sendMessage.setText(messageText.toString());
        sendMessage.setReplyMarkup(getMainMenuInlineKeyboard());

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String escapeHtml(String text) {
        return text.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace("\"", "&quot;")
                .replace("'", "&#39;");
    }

    private void sendGrammarMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üìñ *Grammatik bo‚Äòlimdan foydalanish uchun mavzuni tanlang:*");

        InlineKeyboardMarkup markup = sendGrammarList(chatId);
        if (markup.getKeyboard().isEmpty()) {
            sendTextMessage(chatId, "‚ö†Ô∏è Xatolik! Grammatik qoidalar topilmadi.");
            return;
        }

        message.setReplyMarkup(markup);
        sendMessage(message);
    }

    private void processGrammarSelection(long chatId, String data) {
        String ruleIdStr = data.replace("grammar_", "").trim();
        if (ruleIdStr.matches("\\d+")) {
            int ruleId = Integer.parseInt(ruleIdStr);
            sendGrammarRule(chatId, ruleId);
        } else {
            sendTextMessage(chatId, "‚ö†Ô∏è *Noto‚Äòg‚Äòri grammatika ID!* Iltimos, tugmalardan birini tanlang.");
        }
    }

    private void processTranslationSelection(long chatId, String data) {
        userSelectedLang.put(chatId, data.replace("translate_", ""));
        userWaitingForTranslation.put(chatId, true);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üìù Tarjima qilmoqchi bo‚Äòlgan so‚Äòz yoki matnni kiriting:");

        sendMessage(message);
    }

    private void sendAudioRetryMessage(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setParseMode("HTML");
        message.setText("üé§ <b>Audio faylingizni yuboring!</b>\n\nüìå Bot ovozli xabarni matnga aylantirib beradi.");
        message.setReplyMarkup(getVoiseInlineKeyboard());
        sendMessage(message);
    }

    private void sendMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
            System.out.println("‚ùå Xabar yuborishda xatolik yuz berdi: " + e.getMessage());
        }
    }

    private void sendEditMessage(EditMessageText message) {

        if (message == null) {
            System.out.println("‚ùå Xabar null, jo‚Äònatish bekor qilindi.");
            return;
        }

        if (message.getText() == null || message.getText().isEmpty()) {
            System.out.println("‚ùå Xabar matni bo‚Äòsh, jo‚Äònatish bekor qilindi.");
            return;
        }

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
            System.out.println("‚ùå Xabarni yangilashda xatolik: " + e.getMessage());
        }
    }

    private void sendGrammarRule(long chatId, int ruleId) {
        GrammarRule rule = DBService.getGrammarRuleById(ruleId);

        if (rule != null) {
            StringBuilder response = new StringBuilder("üìñ *" + escapeMarkdownV2(rule.getRuleName()) + "*\n\n");
            response.append("üìå *Tavsif:* " + escapeMarkdownV2(rule.getDescription()) + "\n\n");

            if (rule.getNegativeExample() != null && !rule.getNegativeExample().isEmpty()) {
                response.append("‚ùå *Noto‚Äòg‚Äòri misol:* \n")
                        .append(escapeMarkdownV2(rule.getNegativeExample().replace("\\n", "\n"))).append("\n\n");
            }
            if (rule.getQuestionExample() != null && !rule.getQuestionExample().isEmpty()) {
                response.append("‚ùì *Savol misoli:* \n")
                        .append(escapeMarkdownV2(rule.getQuestionExample().replace("\\n", "\n"))).append("\n\n");
            }
            if (rule.getYoutubeLink() != null && !rule.getYoutubeLink().isEmpty()) {
                response.append("‚ñ∂Ô∏è [üì∫ Video qo‚Äòllanma](").append(rule.getYoutubeLink()).append(")\n");
            }

            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(response.toString());
            message.setParseMode("MarkdownV2");
            message.setReplyMarkup(getGrammerBackMenu());

            try {
                execute(message);
            } catch (TelegramApiException e) {
                throw new RuntimeException(e);
            }
        } else {
            sendTextMessage(chatId, "‚ö†Ô∏è *Xatolik!* Grammatik qoida topilmadi.");
        }
    }

    private void sendAudioMessage(long chatId, String audioPath) {
        File audioFile = new File(audioPath);


        // üîπ Fayl hajmini tekshirish (Telegram 50MB cheklov)
        if (audioFile.length() > 50 * 1024 * 1024) {
            sendTextMessage(chatId, "‚ö†Ô∏è Xatolik: Fayl hajmi 50MB dan oshib ketdi!");
            return;
        }

        SendAudio sendAudio = new SendAudio();
        sendAudio.setChatId(chatId);
        sendAudio.setAudio(new InputFile(audioFile));
        sendAudio.setCaption("üéµ Sizning audio faylingiz tayyor!");
        sendAudio.setReplyMarkup(getAudioBackMenu());

        try {
            execute(sendAudio); // üîπ Audio yuborish
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }


        // üîπ Fayl yuborilgandan keyin o‚Äòchirish
        if (audioFile.delete()) {
            System.out.println("‚úÖ Fayl o‚Äòchirildi: " + audioPath);
        } else {
            audioFile.deleteOnExit();
            System.out.println("‚ö†Ô∏è Fayl o‚Äòchirishda muammo: " + audioPath);
        }
    }

    private void processTranslation(long chatId, String text) {
        userWaitingForTranslation.put(chatId, false); // üîπ Tarjima rejimini o‚Äòchiramiz

        // üîπ Foydalanuvchi til juftligini tanlaganligini tekshirish
        String langPair = userSelectedLang.getOrDefault(chatId, "en_uz").trim(); // ‚úÖ Standart qiymat: inglizcha ‚Üí o‚Äòzbekcha

        // üîπ Til juftligini ajratib olish
        String[] langParts = langPair.split("[_-]");
        if (langParts.length != 2) {
            sendTextMessage(chatId, "‚ö†Ô∏è Xatolik! Tarjima uchun noto‚Äòg‚Äòri til juftligi tanlandi.");
            return;
        }

        // üîπ Tarjima qilish
        String translatedText = translateText(text, langPair);

        // üîπ Tarjima natijasi matnini shakllantirish
        StringBuilder responseMessage = new StringBuilder();
        responseMessage.append("<b>üîπ Asl matn:</b> <i>").append(text).append("</i>\n\n");
        responseMessage.append("<b>‚úÖ Tarjima:</b> <i>").append(translatedText).append("</i>\n\n");
        responseMessage.append("üåç Til yo‚Äònalishi: <b>").append(langParts[0].toUpperCase()).append(" ‚Üí ").append(langParts[1].toUpperCase()).append("</b>");

        // üîπ Tarjima natijasini yuborish
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(responseMessage.toString());
        sendMessage.setParseMode("HTML");
        sendMessage.setReplyMarkup(getTranslationInlineKeyboard());

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void retryTest(long chatId) {
        // üîπ Foydalanuvchi natijalarini o‚Äòchirish
        userTests.remove(chatId);
        userScores.remove(chatId);
        userCurrentQuestion.remove(chatId);

        // üîπ Foydalanuvchini test tanlash menyusiga qaytarish
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setParseMode("HTML"); // ‚úÖ HTML formatini qo‚Äòllash
        sendMessage.setText(
                "üîÑ <b>Testni qayta boshlash</b>\n\n" +
                        "üìä <i>Iltimos, darajani tanlang:</i>"
        );
        sendMessage.setReplyMarkup(getLevelSelectionInlineKeyboard()); // ‚úÖ Inline daraja tanlash menyusi

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void updateProgress(long chatId, int messageId, int progress) {
        try {
            String progressMessage;
            switch (progress) {
                case 0 -> progressMessage = """
                        üéô <b>Ovoz qabul qilindi!</b>
                        üîÑ <i>AI tahlilni boshladi...</i>
                        """;
                case 25 -> progressMessage = """
                        üì° <b>Signal qabul qilinyapti...</b>
                        ‚è≥ <i>Ovoz tahlil qilinmoqda...</i>
                        """;
                case 50 -> progressMessage = """
                        üéß <b>AI ovozingizni tinglamoqda...</b>
                        üõ† <i>Matn shakliga moslashtirilmoqda...</i>
                        """;
                case 75 -> progressMessage = """
                        ‚úç <b>So‚Äòzlar yozib olinmoqda...</b>
                        üìú <i>Matn shakllantirilmoqda...</i>
                        """;
                case 100 -> progressMessage = """
                        ‚úÖ <b>Tayyor!</b>
                        üìÑ <i>Ovozli xabaringiz matnga aylandi!</i>
                        """;
                default -> progressMessage = """
                        ‚è≥ <b>Jarayon davom etmoqda...</b>
                        üîé <i>Iltimos, biroz kuting...</i>
                        """;
            }

            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId);
            editMessage.setMessageId(messageId);
            editMessage.setParseMode("HTML");
            editMessage.setText(progressMessage + "\n\nüìä <b>Tugallanish darajasi:</b> <code>" + progress + "%</code>");

            execute(editMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void processAudio(long chatId, String fileId) {
        try {
            // üîπ Foydalanuvchiga jarayon boshlanganini bildirish
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setParseMode("HTML");
            sendMessage.setText("üéô <b>Ovozli xabaringiz tahlil qilinmoqda...</b>\n\n‚è≥ <i>Jarayon: 0%</i>");
            Message message = execute(sendMessage);

            int messageId = message.getMessageId();

            // üîπ Jarayonning progressini yangilash
            Thread.sleep(1000);
            updateProgress(chatId, messageId, 25);
            Thread.sleep(1000);
            updateProgress(chatId, messageId, 50);
            Thread.sleep(1000);
            updateProgress(chatId, messageId, 75);

            // üîπ Audio faylni transkripsiya qilish
            String audioUrl = getAudioFileUrl(fileId);
            String transcribedText = transcribeAudioWithDeepgram(audioUrl);

            // üîπ Natijani tekshirish
            if (transcribedText == null || transcribedText.trim().isEmpty()) {
                transcribedText = "‚ö†Ô∏è <b>Xatolik:</b> Ovozli xabarda matn aniqlanmadi.";
            }

            updateProgress(chatId, messageId, 100);

            if (isAiMode) {
                processAiResponse(chatId, messageId, transcribedText);
            } else {
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void processAiResponse(long chatId, int messageId, String userText) {
        CompletableFuture.runAsync(() -> {
            String aiResponse = chatWithGPT(userText);

            if (aiResponse == null || aiResponse.trim().isEmpty()) {
                aiResponse = "‚ö†Ô∏è AI javobi olinmadi.";
            }

            // üîπ Xabar mavjudligini tekshiramiz va uni o‚Äòchiramiz
            boolean isDeleted = deleteMessage(chatId, messageId);

            if (!isDeleted) {
                sendMessage(chatId, "ü§ñ <b>AI javobi:</b>\n\n" + aiResponse);
            }
        });
    }

    private boolean deleteMessage(long chatId, int messageId) {
        try {
            DeleteMessage deleteMessage = new DeleteMessage();
            deleteMessage.setChatId(chatId);
            deleteMessage.setMessageId(messageId);
            execute(deleteMessage);
            return true;
        } catch (TelegramApiException e) {
            System.out.println("‚ö†Ô∏è Xabar o‚Äòchirilmadi yoki allaqachon o‚Äòchirilgan: " + e.getMessage());
            return false;
        }
    }


    private InlineKeyboardMarkup getBackButtonInlineKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(Collections.singletonList(createInlineButton("‚¨ÖÔ∏è Ortga", "back_help_menu")));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getMainInlineKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üéô Nutqni Matnga", "voice_Menu", "üåç Matn Tarjimasi", "instant_translation"));
        keyboardRows.add(createInlineButtonRow("üß† Intellektual Sinov", "level_test", "üìñ Grammatika Qo‚Äòllanmasi", "grammar_guide"));
        keyboardRows.add(createInlineButtonRow("‚ùì Savollar Bo‚Äòlimi", "questions", "üèÜ Yetakchilar Ro‚Äòyxati", "top"));
        keyboardRows.add(createInlineButtonRow("üë§ Mening Profilim", "Accaunt", "ü§ñ AI Yordamchi", "aicallback"));
        keyboardRows.add(createInlineButtonRow("‚ÑπÔ∏è Ma‚Äôlumotlar", "info_menu"));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getHelpInlineKeyboard(boolean isPremium) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üìú Bot haqida", "about_bot", "üìñ Qo‚Äòllanma", "user_guide"));

        if (!isPremium) {
            keyboardRows.add(Collections.singletonList(createInlineButton("üíé Premium sotib olish", "buy_premium")));
        }

        keyboardRows.add(Collections.singletonList(createInlineButton("‚¨ÖÔ∏è Asosiy menyu", "back_main")));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getVoiseInlineKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üéô Ovoz ‚Üí Matn", "convert_voice", "üìù Matn ‚Üí Ovoz", "convert_text"));
        keyboardRows.add(Collections.singletonList(createInlineButton("‚¨ÖÔ∏è Asosiy menyu", "back_main")));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getLevelSelectionInlineKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üîµ A1", "level_a1", "üü¢ A2", "level_a2"));
        keyboardRows.add(createInlineButtonRow("üü° B1", "level_b1", "üü† B2", "level_b2"));
        keyboardRows.add(createInlineButtonRow("üî¥ C1", "level_c1", "‚ö´ C2", "level_c2"));
        keyboardRows.add(Collections.singletonList(createInlineButton("‚¨ÖÔ∏è Asosiy menyu", "back_main")));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getGrammerBackMenu() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üîÑ Qayta urinish", "Grammer_reset", "üè† Asosiy menyu", "back_main"));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getRetryTestKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üîÑ Qayta Topshirish", "Questions_reset", "üè† Asosiy menyu", "back_main"));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getAudioBackMenu() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üîÑ Qayta urinish", "audio_reset"));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getTranslationInlineKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üîÑ Qayta tarjima", "instant_translation", "üè† Asosiy menyu", "back_main"));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getTranslateInlineKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("üá¨üáß English ‚Üí Uzbek", "translate_en_uz"));
        keyboardRows.add(createInlineButtonRow("üá∫üáø Uzbek ‚Üí English", "translate_uz_en"));
        keyboardRows.add(createInlineButtonRow("‚¨ÖÔ∏è Asosiy menyuga qaytish", "back_main"));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup getMainMenuInlineKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        keyboardRows.add(createInlineButtonRow("‚¨ÖÔ∏è Asosiy menyuga qaytish", "back_main"));

        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    private List<InlineKeyboardButton> createInlineButtonRow(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(button);

        return row;

    }

    private InlineKeyboardMarkup sendGrammarList(long chatId) {
        String query = "SELECT id, rule_name FROM grammar_rules ORDER BY id ASC";
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        try (Connection conn = DBService.connect();
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                int ruleId = rs.getInt("id");
                String ruleName = rs.getString("rule_name");

                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(ruleName);
                button.setCallbackData("grammar_" + ruleId);

                buttons.add(Collections.singletonList(button)); // Har bir tugmani alohida qatorga joylash
            }
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è Asosiy menyuga qaytish");
            backButton.setCallbackData("back_main");
            buttons.add(Collections.singletonList(backButton));

        } catch (Exception e) {
            e.printStackTrace();
            sendTextMessage(chatId, "‚ö†Ô∏è Xatolik! Grammatik qoidalarni yuklashda muammo yuz berdi.");
        }

        markup.setKeyboard(buttons);
        return markup; // ‚úÖ InlineKeyboardMarkup qaytariladi
    }

    private List<InlineKeyboardButton> createInlineButtonRow(String text1, String callbackData1, String text2, String callbackData2) {
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createInlineButton(text1, callbackData1));
        row.add(createInlineButton(text2, callbackData2));
        return row;
    }

    private InlineKeyboardButton createInlineButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private String getAudioFileUrl(String fileId) throws TelegramApiException {
        GetFile getFile = new GetFile();
        getFile.setFileId(fileId);
        org.telegram.telegrambots.meta.api.objects.File file = execute(getFile);
        return "https://api.telegram.org/file/bot" + getBotToken() + "/" + file.getFilePath();
    }

    private void processUserAnswer(long chatId, String userAnswer) {
        checkAndProcessAnswer(chatId, userAnswer);
    }

    public String translateText(String text, String langPair) {
        try {
            String[] langParts = langPair.split("[_-]");
            if (langParts.length != 2) {
                return "‚ö†Ô∏è Xato: Tarjima tili noto‚Äòg‚Äòri formatda.";
            }

            String fromLang = langParts[0].trim();
            String toLang = langParts[1].trim();

            // ‚úÖ API URL (`v1` versiya uchun)
            String apiUrl = "https://google-translate113.p.rapidapi.com/api/v1/translator/text";

            // ‚úÖ JSON so‚Äòrov yaratish (to‚Äòg‚Äòri format)
            String requestBody = String.format("{\"from\":\"%s\", \"to\":\"%s\", \"text\":\"%s\"}", fromLang, toLang, text);

            // ‚úÖ HTTP so‚Äòrovni yuborish
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(apiUrl))
                    .header("Content-Type", "application/json")
                    .header("X-RapidAPI-Key", "e362de5a5bmsha229a92cefdfe68p168425jsnb5dac5a32abe") // API kalitingizni qo‚Äòying!
                    .header("X-RapidAPI-Host", "google-translate113.p.rapidapi.com")
                    .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            ObjectMapper mapper = new ObjectMapper();
            JsonNode node = mapper.readTree(response.body());

            // ‚úÖ Tarjima natijasini olish (`trans` maydonidan)
            if (node.has("trans")) {
                return node.get("trans").asText();
            } else {
                return "‚ö†Ô∏è Tarjima topilmadi.";
            }

        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå Tarjima qilishda xatolik yuz berdi! üö®";
        }
    }

    private String transcribeAudioWithDeepgram(String audioUrl) throws IOException {
        String apiUrl = "https://api.deepgram.com/v1/listen";
        String jsonBody = "{ \"url\": \"" + audioUrl + "\", \"language\": \"en\" }";

        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpPost httpPost = new HttpPost(apiUrl);
            httpPost.setHeader("Authorization", "Token " + DEEPGRAM_API_KEY);
            httpPost.setHeader("Content-Type", "application/json");
            httpPost.setEntity(new StringEntity(jsonBody));

            try (CloseableHttpResponse response = client.execute(httpPost)) {
                String responseString = EntityUtils.toString(response.getEntity());

                System.out.println("Deepgram API Response: " + responseString);

                ObjectMapper mapper = new ObjectMapper();
                DeepgramResponse deepgramResponse = mapper.readValue(responseString, DeepgramResponse.class);

                return deepgramResponse.getResults().getChannels().get(0).getAlternatives().get(0).getTranscript();
            }
        }
    }

    private String convertTextToSpeech(String text) {
        try {
            String apiUrl = "https://api.deepgram.com/v1/speak?model=aura-asteria-en";
            String apiKey = DEEPGRAM_API_KEY;

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(apiUrl))
                    .header("Authorization", "Token " + apiKey)
                    .header("Content-Type", "text/plain")
                    .POST(HttpRequest.BodyPublishers.ofString(text))
                    .build();

            HttpResponse<Path> response = HttpClient.newHttpClient()
                    .send(request, HttpResponse.BodyHandlers.ofFile(Paths.get("audio.mp3")));

            if (response.statusCode() == 200) {
                return "audio.mp3"; // ‚úÖ Fayl yaratildi
            } else {
                return null; // ‚ùå Xatolik
            }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private String escapeMarkdownV2(String text) {
        return MD_V2_PATTERN.matcher(text).replaceAll("\\\\$1");
    }


    @Override
    public String getBotUsername() {
        return "@EnglishSupportN1_bot";
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }
}
